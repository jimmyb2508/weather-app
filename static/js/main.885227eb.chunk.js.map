{"version":3,"sources":["components/location-details.jsx","components/forecast-summary.jsx","components/forecast-summaries.jsx","components/ForecastDetails.jsx","components/SearchForm.jsx","components/app.jsx","index.jsx"],"names":["LocationDetails","props","className","city","country","ForecastSummary","moment","date","format","temperature","description","name","iconId","icon","flip","rotate","onClick","onSelect","ForecastSummaries","forecasts","map","forecast","key","max","onForecastSelect","ForecastDetails","min","wind","speed","direction","humidity","SearchForm","state","searchText","handleInputChange","bind","event","this","setState","target","value","onSearch","type","onChange","placeholder","e","React","Component","App","handleForecastSelect","selectedDate","handleCityRequest","preventDefault","Axios","get","then","response","location","data","selectedForecast","find","render","document","getElementById"],"mappings":"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","file":"static/js/main.885227eb.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst LocationDetails = props => <h1 className=\"location-details\">{props.city}, {props.country}</h1>;\n\nLocationDetails.propTypes = {\n  city: PropTypes.string.isRequired,\n  country: PropTypes.string.isRequired,\n};\n\nexport default LocationDetails;","import React from 'react';\nimport WeatherIcon from 'react-icons-weather';\nimport moment from 'moment';\nimport '../styles/forecast-summary.css';\n\nconst ForecastSummary = (props) => {\n  return (\n    <div className=\"summaryForecast\">\n      <span className='forecast-summary__date'>{moment(props.date).format('ddd Do MMM')}</span>\n      <br></br>\n      <span className='forecast-summary__temperature'>{props.temperature}°C</span>\n      <br></br>\n      <span className='forecast-summary__description'>{props.description}</span>\n      <br></br>\n      <br></br>\n      <br></br>\n      <span className='forecast-summary__icon'><WeatherIcon name=\"owm\" iconId={props.icon} flip=\"horizontal\" rotate=\"90\" /></span>\n      <br></br>\n      <br></br>\n      <button onClick={() => props.onSelect(props.date)}>More details</button>\n    </div>  \n  )\n}\n\nexport default ForecastSummary;","import React from 'react';\nimport ForecastSummary from './forecast-summary';\nimport '../styles/forecast-summaries.css';\n// import LocationDetails from './location-details';\n\nimport '../styles/forecast-summaries.css'\n\nconst ForecastSummaries = props => (\n  <div className=\"forecast-summaries\">\n  {\n    props.forecasts.map(forecast => (\n      <ForecastSummary\n      key={forecast.date}\n      date={forecast.date}\n      description={forecast.description}\n      icon={forecast.icon}\n      temperature={forecast.temperature.max}\n      onSelect={props.onForecastSelect}\n      />\n    ))\n  }\n  </div>\n);\n\nexport default ForecastSummaries;","import React from 'react';\nimport moment from 'moment';\nimport '../styles/forecast-details.css';\n\nconst ForecastDetails = props => {\n  return <div className=\"detailedForecast\" >\n    <span className=\"formattedDate\">Date: {moment(props.forecast.date).format('ddd Do MMM')}</span>\n    <br></br>\n    <span className=\"maxTemp\">Max Temperature:{props.forecast.temperature.max}°C</span>\n    <br></br>\n    <span className=\"minTemp\">Min Temperature: {props.forecast.temperature.min}°C</span>\n    <br></br>\n    <span className=\"windSpeed\">Wind Speed: {props.forecast.wind.speed}mph</span>\n    <br></br>\n    <span className=\"windDirection\">Wind Direction: {props.forecast.wind.direction}</span>\n    <br></br>\n    <span className=\"humidity\">Humidity: {props.forecast.humidity}%</span>\n  </div>;\n};\n\nexport default ForecastDetails;","import React from 'react';\n\nclass SearchForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchText: \"\",\n    };\n    this.handleInputChange = this.handleInputChange.bind(this);\n  }\n  handleInputChange(event) {\n    this.setState({\n      searchText: event.target.value,\n    });\n  }\n\n  render() {\n    const { onSearch } = this.props;\n    const { searchText } = this.state;\n    return <div className=\"searchBar\">\n      <input\n        className=\"input\"\n        type=\"text\"\n        value={this.state.searchText}\n        onChange={this.handleInputChange}\n        placeholder=\"Enter City Name Here...\"\n        />\n      <button\n        onClick={e => onSearch(e, searchText)}\n        className=\"searchButton\" \n        type=\"submit\">\n        Search\n        </button>\n    </div>\n  }\n}\n\nexport default SearchForm;","import React from 'react';\n// import PropTypes from 'prop-types';\nimport LocationDetails from './location-details';\nimport ForecastSummaries from './forecast-summaries';\nimport ForecastDetails from './ForecastDetails';\nimport SearchForm from './SearchForm';\n\nimport '../styles/app.css';\nimport Axios from 'axios';\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      selectedDate: 0,\n      forecasts: [],\n      location: {\n        city: '',\n        country: '',\n      },\n    };\n\n    this.handleForecastSelect = this.handleForecastSelect.bind(this);\n  }\n\n  handleForecastSelect = date => {\n    this.setState({\n      selectedDate: date,\n    });\n  };\n\n  componentDidMount() {\n    Axios.get(`https://mcr-codes-weather.herokuapp.com/forecast`).then(response => {\n      this.setState({\n        location: {\n          city: response.data.location.city,\n          country: response.data.location.country,\n        },\n        forecasts: response.data.forecasts,\n      });\n    });\n  }\n\n  handleCityRequest = (e, city) => {\n    e.preventDefault();\n\n    Axios.get(`https://mcr-codes-weather.herokuapp.com/forecast?city=${city}`).then(response => {\n      this.setState({\n        location: {\n          city: response.data.location.city,\n          country: response.data.location.country,\n        },\n        forecasts: response.data.forecasts,\n      });\n    });\n  };\n\n  render() {\n    const selectedForecast = this.state.forecasts.find(\n      forecast => forecast.date === this.state.selectedDate,\n    );\n\n    return (\n      <div className=\"forecast\">\n        <LocationDetails city={this.state.location.city} country={this.state.location.country} />\n\n        <SearchForm onSearch={this.handleCityRequest} />\n\n        <br></br>\n\n        <ForecastSummaries\n          forecasts={this.state.forecasts}\n          onForecastSelect={this.handleForecastSelect}\n        />\n        {selectedForecast && <ForecastDetails forecast={selectedForecast} />}\n      </div>\n    );\n  }\n}\n\n// App.propTypes = {\n//   location: PropTypes.shape({\n//     city: PropTypes.string,\n//     country: PropTypes.string,\n//   }).isRequired,\n//   forecasts: PropTypes.array.isRequired,\n// };\n\nexport default App;\n","import 'raf/polyfill';\n\nimport React from 'react';\nimport { render } from 'react-dom';\nimport App from './components/app';\n// import { location, forecasts } from './data/forecast.json'\n\n// render(<App location={location} forecasts={forecasts} />, document.getElementById('root'));\nrender(<App />, document.getElementById('root'));"],"sourceRoot":""}